#!/usr/bin/env python


import rospy, tf, math

from geometry_msgs.msg import Pose2D
from sensor_msgs.msg import PointCloud2, LaserScan

from laser_assembler.srv import *


# class vars
relay_scan = True
last_scan_in_msg = None
last_pose = None
tf_listener = tf.TransformListener()

# config
linearUpdate = 0.1
angularUpdate = 0.1


def pose2d_from_tf(source_frame, target_frame):
  
  try:
    
    # receive the robot transform and compute the robot pose
    #tf_listener.waitForTransform(source_frame, target_frame, rospy.Time.now(), rospy.Duration(0.01))
    
    ( (x, y, _), q ) = tf_listener.lookupTransform(source_frame, target_frame, rospy.Time(0))
    (_, _, theta) = tf.transformations.euler_from_quaternion(q)
    
    return Pose2D(x, y, theta)
    
  except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException, tf.Exception), Argument:
    
    rospy.logwarn("Robot pose could not be acquired")
    rospy.loginfo(Argument)
  
  return None

def eucledean_2d_distance(p1, p2):
  return math.sqrt((p2.x - p1.x)**2 + (p2.y - p1.y)**2)

def angular_yaw_distance(p1, p2):
  angle_difference = math.fabs(p1.theta - p2.theta)
  return math.atan2(math.sin(angle_difference), math.cos(angle_difference))

def scan_in_callback(msg):
  
  global last_scan_in_msg
  global last_pose
  global relay_scan
  
  if(last_scan_in_msg == None):
    last_scan_in_msg = msg
    last_pose = pose2d_from_tf("odom", "base_link")
    relay_scan = True
  
  current_scan_in_msg = msg
  current_pose = pose2d_from_tf("odom", "base_link")
  
#  rospy.loginfo("last pose:\n%s\ncurrent pose:\n%s\nlinearUpdate:\n%s\nangularUpdate:\n%s", last_pose, current_pose, eucledean_2d_distance(current_pose, last_pose), angular_yaw_distance(current_pose, last_pose))
  
  if eucledean_2d_distance(current_pose, last_pose) > linearUpdate or angular_yaw_distance(current_pose, last_pose) > angularUpdate:
    relay_scan = True
    last_scan_in_msg = current_scan_in_msg
    last_pose = current_pose




# CLASS __init__
rospy.init_node("scan_persistence_node")

rospy.loginfo("Waiting for service assemble_scans2")
rospy.wait_for_service("assemble_scans")
rospy.loginfo("Service assemble_scans2 available")

pointcloud_out_publisher = rospy.Publisher("cloud_out", PointCloud2, queue_size=10)
scan_in_subscriber = rospy.Subscriber("scan_in", LaserScan, scan_in_callback)
scan_out_publisher = rospy.Publisher("scan_out", LaserScan, queue_size=10)

r = rospy.Rate(10)


# CLASS loop

while not rospy.is_shutdown():
  
#  try:
    
  if relay_scan:
    relay_scan = False
    
    if last_scan_in_msg != None:
      scan_out_publisher.publish(last_scan_in_msg)
  
  fixed_frame_cloud = None
  
  try:
    assemble_scans = rospy.ServiceProxy('assemble_scans2', AssembleScans2)
    resp = assemble_scans(rospy.Time(0, 0), rospy.get_rostime())
    fixed_frame_cloud = resp.cloud
  except rospy.ServiceException, e:
    print "Service call failed: %s"%e
    continue
    
  base_link_cloud = tf_listener.transformPointCloud("base_link", fixed_frame_cloud)
  
  pointcloud_out_publisher.publish(base_link_cloud)


      
  r.sleep()

#  except rospy.Exception, e:
#    print "Exception: %s"%e
#    sys.exit(-1)

